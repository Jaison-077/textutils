{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","Mode","href","title","type","id","onClick","toggleMode","htmlFor","navmode","TextForm","prop","useState","text","setText","heading","value","onChange","event","console","log","target","rows","style","backgroundColor","color","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","showAlert","split","join","length","propType","propTypes","string","isRequired","aboutText","defaultProps","Alert","alert","role","msg","App","setMode","navMode","setnavMode","setAlert","message","setTimeout","serviceText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.485cdd8c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n// import { a } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarNavDropdown\"\r\n            aria-controls=\"navbarNavDropdown\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">\r\n                  {props.aboutText}\r\n                </a>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n            <div className={`form-check form-switch text-${props.Mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable {props.navmode} Mode</label>\r\n            </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propType = {\r\n  title: propTypes.string.isRequired,\r\n  aboutText: propTypes.string\r\n};\r\n\r\nNavbar.defaultProps={\r\n  title: 'Nithiindcbfd',\r\n  aboutText:'Lol'\r\n};","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(prop) {\r\n    \r\n    const[text,setText] = useState('');\r\n\r\n    const handleUpClick=()=>{\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n\r\n        \r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoClick=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    \r\n    const handleClearTextClick=()=>{\r\n        setText('');\r\n    }\r\n\r\n\r\n    //     COPY TEXT \r\n    const handleCopy=()=>{\r\n        var text = document.getElementById(\"MyBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        prop.showAlert('copied to clipboard','success');\r\n    }\r\n\r\n    //Remove Extra Spaces\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n\r\n    // const handleSortTextClick=()=>{\r\n    //     // let newText = new String(text);\r\n    //     let newText = text;\r\n    //     setText(newText);\r\n    // }\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"on Change\");\r\n        setText(event.target.value);\r\n    }\r\n    // setText('JAISON')\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n            <h1>{prop.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            {/* <label htmlFor=\"MyBox\" className=\"form-label\">Example textarea</label> */}\r\n            <textarea className=\"form-control\" id=\"MyBox\" value={text} onChange={handleOnChange} rows=\"10\" style={{backgroundColor: prop.Mode==='dark'?'#00002a':'white',color: prop.Mode==='dark'?'white':'black'}}></textarea>\r\n            <button className=\"btn btn-primary my-2\" onClick={handleUpClick}>Convert to Uppercase</button> \r\n            <button className=\"btn btn-primary my-2 ms-3\" onClick={handleLoClick}>Convert to lowerCase</button>\r\n            <button className=\"btn btn-primary my-2 ms-3\" onClick={handleClearTextClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary my-2 ms-3\" onClick={handleCopy}>CopyText</button>\r\n            <button className=\"btn btn-primary my-2 ms-3\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            </div>\r\n\r\n            <div className=\"container my-3\">\r\n                <h1>Your text summary</h1>\r\n                <p>{text.split(' ').length} words {text.length} characters</p>\r\n                <p>{0.008*text.split('').length} Minutes Read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    return (props.alert && \r\n        <>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                {/* <strong>{props.alert.type}</strong>: */}{props.alert.msg}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from'./components/Navbar';\n// import About from './components/About';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React,{useState} from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [Mode, setMode] = useState('light') //Whether Dark mode is enable\n  const [navMode, setnavMode] = useState('dark')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert=(message,type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null)\n      }, 2500);\n  }\n\n  const toggleMode=()=>{\n    if(Mode === 'light')\n    {\n      setMode('dark');\n      setnavMode('light');\n      document.body.style.backgroundColor = '#082350';\n      document.body.style.color = 'white';\n      showAlert('Dark Mode Enabled.','success');\n    }\n    else\n    {\n      setMode('light');\n      setnavMode('dark');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert('Light Mode Enabled.','success');\n    }\n  }\n\n  return (\n    <div>\n        {/* <Router> */}\n        {/* <Navbar /> */}\n        \n        <Navbar title=\"TextUtils\" aboutText=\"About\" serviceText=\"Services\" Mode={Mode} toggleMode={toggleMode} navmode={navMode}/>\n        <Alert alert={alert}/>\n\n         {/* <div className=\"container my-3\">\n          <TextForm heading=\"Enter paragraph to analyse below\" Mode={Mode} showAlert={showAlert}/>\n           <About/>\n         </div>  */}\n\n            {/* <Switch>\n              <Route exact path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/\"> */}\n                  <div className=\"container my-3\">\n                  <TextForm heading=\"Enter paragraph to analyse below\" Mode={Mode} showAlert={showAlert}/>\n                  {/* <About/> */}\n                </div>\n              {/* </Route>\n            </Switch>\n        </Router> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}